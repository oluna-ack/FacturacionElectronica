//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Microsoft.VSDesigner generó automáticamente este código fuente, versión=4.0.30319.42000.
// 
#pragma warning disable 1591

namespace firmarStdSri.wsGrabarDocV3Test {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="wsGrabarDocSoap", Namespace="http://facturas.acklins.net/WsSiteCargasDescargasAckTest/wsGrabarDoc.asmx")]
    public partial class wsGrabarDoc : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GrabarDatosDocumentoXmlOperationCompleted;
        
        private System.Threading.SendOrPostCallback GrabarDatosDocumentoXmlLabOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public wsGrabarDoc() {
            this.Url = global::firmarStdSri.Properties.Settings.Default.firmarStdSri_wsGrabarDocV3Test_wsGrabarDoc;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GrabarDatosDocumentoXmlCompletedEventHandler GrabarDatosDocumentoXmlCompleted;
        
        /// <remarks/>
        public event GrabarDatosDocumentoXmlLabCompletedEventHandler GrabarDatosDocumentoXmlLabCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://facturas.acklins.net/WsSiteCargasDescargasAckTest/wsGrabarDoc.asmx/GrabarD" +
            "atosDocumentoXml", RequestNamespace="http://facturas.acklins.net/WsSiteCargasDescargasAckTest/wsGrabarDoc.asmx", ResponseNamespace="http://facturas.acklins.net/WsSiteCargasDescargasAckTest/wsGrabarDoc.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GrabarDatosDocumentoXml(
                    int idTipoDocumento, 
                    string nombreBd, 
                    string numeroDocumento, 
                    string numeroIdentificacion, 
                    string correo, 
                    string usuario, 
                    string titulo, 
                    string descripcion, 
                    string visible, 
                    string archivo, 
                    int automatico, 
                    string tamanoArchivo, 
                    string periodo, 
                    int idGrupo, 
                    string nomArchRef, 
                    string Nombre, 
                    string Direccion, 
                    string xmlArchivo, 
                    string pathArchivo, 
                    string pathArchivoAutorizado, 
                    string numeroAutorizacion, 
                    bool autorizacion) {
            object[] results = this.Invoke("GrabarDatosDocumentoXml", new object[] {
                        idTipoDocumento,
                        nombreBd,
                        numeroDocumento,
                        numeroIdentificacion,
                        correo,
                        usuario,
                        titulo,
                        descripcion,
                        visible,
                        archivo,
                        automatico,
                        tamanoArchivo,
                        periodo,
                        idGrupo,
                        nomArchRef,
                        Nombre,
                        Direccion,
                        xmlArchivo,
                        pathArchivo,
                        pathArchivoAutorizado,
                        numeroAutorizacion,
                        autorizacion});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GrabarDatosDocumentoXmlAsync(
                    int idTipoDocumento, 
                    string nombreBd, 
                    string numeroDocumento, 
                    string numeroIdentificacion, 
                    string correo, 
                    string usuario, 
                    string titulo, 
                    string descripcion, 
                    string visible, 
                    string archivo, 
                    int automatico, 
                    string tamanoArchivo, 
                    string periodo, 
                    int idGrupo, 
                    string nomArchRef, 
                    string Nombre, 
                    string Direccion, 
                    string xmlArchivo, 
                    string pathArchivo, 
                    string pathArchivoAutorizado, 
                    string numeroAutorizacion, 
                    bool autorizacion) {
            this.GrabarDatosDocumentoXmlAsync(idTipoDocumento, nombreBd, numeroDocumento, numeroIdentificacion, correo, usuario, titulo, descripcion, visible, archivo, automatico, tamanoArchivo, periodo, idGrupo, nomArchRef, Nombre, Direccion, xmlArchivo, pathArchivo, pathArchivoAutorizado, numeroAutorizacion, autorizacion, null);
        }
        
        /// <remarks/>
        public void GrabarDatosDocumentoXmlAsync(
                    int idTipoDocumento, 
                    string nombreBd, 
                    string numeroDocumento, 
                    string numeroIdentificacion, 
                    string correo, 
                    string usuario, 
                    string titulo, 
                    string descripcion, 
                    string visible, 
                    string archivo, 
                    int automatico, 
                    string tamanoArchivo, 
                    string periodo, 
                    int idGrupo, 
                    string nomArchRef, 
                    string Nombre, 
                    string Direccion, 
                    string xmlArchivo, 
                    string pathArchivo, 
                    string pathArchivoAutorizado, 
                    string numeroAutorizacion, 
                    bool autorizacion, 
                    object userState) {
            if ((this.GrabarDatosDocumentoXmlOperationCompleted == null)) {
                this.GrabarDatosDocumentoXmlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGrabarDatosDocumentoXmlOperationCompleted);
            }
            this.InvokeAsync("GrabarDatosDocumentoXml", new object[] {
                        idTipoDocumento,
                        nombreBd,
                        numeroDocumento,
                        numeroIdentificacion,
                        correo,
                        usuario,
                        titulo,
                        descripcion,
                        visible,
                        archivo,
                        automatico,
                        tamanoArchivo,
                        periodo,
                        idGrupo,
                        nomArchRef,
                        Nombre,
                        Direccion,
                        xmlArchivo,
                        pathArchivo,
                        pathArchivoAutorizado,
                        numeroAutorizacion,
                        autorizacion}, this.GrabarDatosDocumentoXmlOperationCompleted, userState);
        }
        
        private void OnGrabarDatosDocumentoXmlOperationCompleted(object arg) {
            if ((this.GrabarDatosDocumentoXmlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GrabarDatosDocumentoXmlCompleted(this, new GrabarDatosDocumentoXmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://facturas.acklins.net/WsSiteCargasDescargasAckTest/wsGrabarDoc.asmx/GrabarD" +
            "atosDocumentoXmlLab", RequestNamespace="http://facturas.acklins.net/WsSiteCargasDescargasAckTest/wsGrabarDoc.asmx", ResponseNamespace="http://facturas.acklins.net/WsSiteCargasDescargasAckTest/wsGrabarDoc.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GrabarDatosDocumentoXmlLab(
                    int idTipoDocumento, 
                    string nombreBd, 
                    string numeroDocumento, 
                    string numeroIdentificacion, 
                    string correo, 
                    string usuario, 
                    string titulo, 
                    string descripcion, 
                    string visible, 
                    string archivo, 
                    int automatico, 
                    string tamanoArchivo, 
                    string periodo, 
                    int idGrupo, 
                    string nomArchRef, 
                    string Nombre, 
                    string Direccion, 
                    string xmlArchivo, 
                    string pathArchivo, 
                    string pathArchivoAutorizado, 
                    string numeroAutorizacion, 
                    bool autorizacion) {
            object[] results = this.Invoke("GrabarDatosDocumentoXmlLab", new object[] {
                        idTipoDocumento,
                        nombreBd,
                        numeroDocumento,
                        numeroIdentificacion,
                        correo,
                        usuario,
                        titulo,
                        descripcion,
                        visible,
                        archivo,
                        automatico,
                        tamanoArchivo,
                        periodo,
                        idGrupo,
                        nomArchRef,
                        Nombre,
                        Direccion,
                        xmlArchivo,
                        pathArchivo,
                        pathArchivoAutorizado,
                        numeroAutorizacion,
                        autorizacion});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GrabarDatosDocumentoXmlLabAsync(
                    int idTipoDocumento, 
                    string nombreBd, 
                    string numeroDocumento, 
                    string numeroIdentificacion, 
                    string correo, 
                    string usuario, 
                    string titulo, 
                    string descripcion, 
                    string visible, 
                    string archivo, 
                    int automatico, 
                    string tamanoArchivo, 
                    string periodo, 
                    int idGrupo, 
                    string nomArchRef, 
                    string Nombre, 
                    string Direccion, 
                    string xmlArchivo, 
                    string pathArchivo, 
                    string pathArchivoAutorizado, 
                    string numeroAutorizacion, 
                    bool autorizacion) {
            this.GrabarDatosDocumentoXmlLabAsync(idTipoDocumento, nombreBd, numeroDocumento, numeroIdentificacion, correo, usuario, titulo, descripcion, visible, archivo, automatico, tamanoArchivo, periodo, idGrupo, nomArchRef, Nombre, Direccion, xmlArchivo, pathArchivo, pathArchivoAutorizado, numeroAutorizacion, autorizacion, null);
        }
        
        /// <remarks/>
        public void GrabarDatosDocumentoXmlLabAsync(
                    int idTipoDocumento, 
                    string nombreBd, 
                    string numeroDocumento, 
                    string numeroIdentificacion, 
                    string correo, 
                    string usuario, 
                    string titulo, 
                    string descripcion, 
                    string visible, 
                    string archivo, 
                    int automatico, 
                    string tamanoArchivo, 
                    string periodo, 
                    int idGrupo, 
                    string nomArchRef, 
                    string Nombre, 
                    string Direccion, 
                    string xmlArchivo, 
                    string pathArchivo, 
                    string pathArchivoAutorizado, 
                    string numeroAutorizacion, 
                    bool autorizacion, 
                    object userState) {
            if ((this.GrabarDatosDocumentoXmlLabOperationCompleted == null)) {
                this.GrabarDatosDocumentoXmlLabOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGrabarDatosDocumentoXmlLabOperationCompleted);
            }
            this.InvokeAsync("GrabarDatosDocumentoXmlLab", new object[] {
                        idTipoDocumento,
                        nombreBd,
                        numeroDocumento,
                        numeroIdentificacion,
                        correo,
                        usuario,
                        titulo,
                        descripcion,
                        visible,
                        archivo,
                        automatico,
                        tamanoArchivo,
                        periodo,
                        idGrupo,
                        nomArchRef,
                        Nombre,
                        Direccion,
                        xmlArchivo,
                        pathArchivo,
                        pathArchivoAutorizado,
                        numeroAutorizacion,
                        autorizacion}, this.GrabarDatosDocumentoXmlLabOperationCompleted, userState);
        }
        
        private void OnGrabarDatosDocumentoXmlLabOperationCompleted(object arg) {
            if ((this.GrabarDatosDocumentoXmlLabCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GrabarDatosDocumentoXmlLabCompleted(this, new GrabarDatosDocumentoXmlLabCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GrabarDatosDocumentoXmlCompletedEventHandler(object sender, GrabarDatosDocumentoXmlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GrabarDatosDocumentoXmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GrabarDatosDocumentoXmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GrabarDatosDocumentoXmlLabCompletedEventHandler(object sender, GrabarDatosDocumentoXmlLabCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GrabarDatosDocumentoXmlLabCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GrabarDatosDocumentoXmlLabCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591